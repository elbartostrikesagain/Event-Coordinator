require 'spec_helper'

# This spec was generated by rspec-rails when you ran the scaffold generator.
# It demonstrates how one might use RSpec to specify the controller code that
# was generated by Rails when you ran the scaffold generator.
#
# It assumes that the implementation code is generated by the rails scaffold
# generator.  If you are using any extension libraries to generate different
# controller code, this generated spec may or may not pass.
#
# It only uses APIs available in rails and/or rspec-rails.  There are a number
# of tools you can use to make these specs even more expressive, but we're
# sticking to rails and rspec-rails APIs to keep things simple and stable.
#
# Compared to earlier versions of this generator, there is very limited use of
# stubs and message expectations in this spec.  Stubs are only used when there
# is no simpler way to get a handle on the object needed for the example.
# Message expectations are only used when there is no simpler way to specify
# that an instance is receiving a specific message.

describe MainEventsController do

  # This should return the minimal set of attributes required to create a valid
  # MainEvent. As you add validations to MainEvent, be sure to
  # update the return value of this method accordingly.
  
  # This should return the minimal set of values that should be in the session
  # in order to pass any filters (e.g. authentication) defined in
  # MainEventsController. Be sure to keep this updated too.
  let(:user) {FactoryGirl.create(:user)}
  let(:main_event) {FactoryGirl.create(:main_event, user: user)}

  describe "GET index" do
    it "assigns all main_events as @main_events" do
      sign_in user
      get :index
      assigns(:main_events).should eq([main_event])
    end
  end

  describe "GET show" do
    it "assigns the requested main_event as @main_event" do
      get :show, {:id => main_event.to_param}
      assigns(:main_event).should eq(main_event)
    end
  end

  describe "GET new" do
    it "assigns a new main_event as @main_event" do
      get :new
      assigns(:main_event).should be_a_new(MainEvent)
    end
  end

  describe "GET edit" do
    it "assigns the requested main_event as @main_event" do
      sign_in user
      get :edit, {:id => main_event.to_param}
      assigns(:main_event).should eq(main_event)
    end
  end

  let(:user) {FactoryGirl.create(:user)}
  describe "POST create" do
    describe "with valid params" do
      let(:valid_attributes) {{"name"=>"test event 4fdsa", "html"=>"fdsafdas"}}

      it "creates a new MainEvent" do
        sign_in user
        expect {
          post :create, {:main_event => valid_attributes}
        }.to change(MainEvent, :count).by(1)
      end

      it "assigns a newly created main_event as @main_event" do
        sign_in user
        post :create, {:main_event => valid_attributes}
        assigns(:main_event).should be_a(MainEvent)
        assigns(:main_event).should be_persisted
      end

      it "redirects to the created main_event" do
        sign_in user
        post :create, {:main_event => valid_attributes}
        response.should redirect_to(MainEvent.last)
      end
    end

    describe "with invalid params" do
      it "assigns a newly created but unsaved main_event as @main_event" do
        # Trigger the behavior that occurs when invalid params are submitted
        sign_in user
        MainEvent.any_instance.stub(:save).and_return(false)
        post :create, {:main_event => {}}
        assigns(:main_event).should be_a_new(MainEvent)
      end

      it "re-renders the 'new' template" do
        # Trigger the behavior that occurs when invalid params are submitted
        sign_in user
        MainEvent.any_instance.stub(:save).and_return(false)
        post :create, {:main_event => {}}
        response.should render_template("new")
      end
    end
  end

  describe "PUT update" do
    before :each do
      sign_in user
    end
    describe "with valid params" do
      it "updates the requested main_event" do
        # Assuming there are no other main_events in the database, this
        # specifies that the MainEvent created on the previous line
        # receives the :update_attributes message with whatever params are
        # submitted in the request.
        sign_in user
        MainEvent.any_instance.should_receive(:update_attributes).with({'these' => 'params'})
        put :update, {:id => main_event.to_param, :main_event => {'these' => 'params'}}
      end

      it "assigns the requested main_event as @main_event" do
        sign_in user
        put :update, {:id => main_event.to_param, :main_event => {"name"=>"test event 4fdsa", "html"=>"fdsafdas"}}
        assigns(:main_event).should eq(main_event)
      end

      it "redirects to the main_event" do
        sign_in user
        put :update, {:id => main_event.to_param, :main_event => {"name"=>"test event 4fdsa", "html"=>"fdsafdas"}}
        response.should redirect_to(main_event)
      end
    end

    describe "with invalid params" do
      let!(:main_event) {FactoryGirl.create(:main_event, user: user)}
      it "assigns the main_event as @main_event" do
        sign_in user
        # Trigger the behavior that occurs when invalid params are submitted
        MainEvent.any_instance.stub(:save).and_return(false)
        put :update, {:id => main_event.to_param, :main_event => {}}
        assigns(:main_event).should eq(main_event)
      end

      it "re-renders the 'edit' template" do
        sign_in user
        # Trigger the behavior that occurs when invalid params are submitted
        MainEvent.any_instance.stub(:save).and_return(false)
        put :update, {:id => main_event.to_param, :main_event => {}}
        response.should render_template("edit")
      end
    end
  end

  describe "DELETE destroy" do
    it "destroys the requested main_event" do
      main_event = FactoryGirl.create(:main_event)
      sign_in main_event.user
      expect {
        delete :destroy, {:id => main_event.to_param}
      }.to change(MainEvent, :count).by(-1)
    end

    it "redirects to the main_events list" do
      sign_in user
      delete :destroy, {:id => main_event.to_param}
      response.should redirect_to(main_events_url)
    end
  end

end
